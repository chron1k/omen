import sys
sys.path.append("../")

from plugin_sdk import *
import os, shutil

class Vulnerability(Module):
    def validate_vuln(self, vuln_node, scenario_root):
        for sys_node in scenario_root.findall(".//system"):
                if vuln_node in sys_node.findall("./vulnerability"): return

                raise Exception("Vulnerability must be defined within system")

    def prepare(self, data):
        scenario_root = data['xml_tree'].getroot()
        project_path = data['project_path']

        for vuln_node in scenario_root.findall(".//vulnerability"):
            self.validate_vuln(vuln_node, scenario_root)

        self.vulns_path = "./modules/vulnerabilities"

        if not os.path.exists(self.vulns_path): os.makedirs(self.vulns_path)

        os.makedirs(f"{project_path}/vulnerabilities")

    def run(self, data):
        node = data['node']
        project_path = data['project_path']
        packer_schema = data['packer_schema']
        parent_sys = data['parent_node']

        sys_name = parent_sys.find("name").text

        vuln_name = node.get("name")
        if vuln_name == None: raise AttributeNotFoundError("name", "vulnerability")

        vuln_path = f"{self.vulns_path}/{vuln_name}.yml"

        if not os.path.exists(vuln_path):
            raise Exception(f"Couldn't find vulnerability \"{vuln_name}\"")

        if not os.path.exists(f"{project_path}/vulnerabilities/{vuln_name}.yml"):
            shutil.copy(vuln_path, f"{project_path}/vulnerabilities/")

        args = []

        if node.find("args") != None:
            for arg in node.find("args").findall("./"):
                args.append(f"{arg.tag}={arg.text}")

        provisioner = {
            "type": "ansible",
            "playbook_file": f"./vulnerabilities/{vuln_name}.yml",
        }

        if len(args) != 0:
            provisioner["extra_arguments"] = ["--extra-vars"] + args

        packer_schema['provisioners'].append(provisioner)

def init():
    plugin = Plugin()
    plugin.register_module("vulnerability", Vulnerability)
    
    return plugin